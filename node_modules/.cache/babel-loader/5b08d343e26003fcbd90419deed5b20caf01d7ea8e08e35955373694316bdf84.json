{"ast":null,"code":"var _jsxFileName = \"/Users/rishaankumar/Desktop/Code/TrackTheSpot_v1/track-the-spot/src/RecPage.js\",\n  _s = $RefreshSig$();\n// RecPage.js\nimport './RecPage.css';\nimport { useEffect, useState } from \"react\";\nimport Table from './Table.js';\nimport HomeNavBar from './HomeNavBar.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RecPage() {\n  _s();\n  const [token, setToken] = useState(window.localStorage.getItem(\"token\") || \"\");\n  const [topSongs, setTopSongs] = useState([]);\n  const [recommendedSongs, setRecommendedSongs] = useState([]);\n  useEffect(() => {\n    if (token) {\n      fetchTopSongs();\n    }\n  }, [token]);\n  const fetchTopSongs = async () => {\n    try {\n      const response = await fetch(`https://api.spotify.com/v1/me/top/tracks?time_range=short_term&limit=30`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch top songs');\n      }\n      const data = await response.json();\n      setTopSongs(data.items || []);\n      fetchRecommendations(data.items); // Pass top songs to generate recommendations\n    } catch (error) {\n      console.error(\"Error fetching top songs:\", error);\n    }\n  };\n  const fetchRecommendations = async songs => {\n    const songTitles = songs.map(song => song.name).join(\", \");\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"text-davinci-003\",\n          prompt: `Based on these songs: ${songTitles}, recommend 30 other similar songs.`,\n          max_tokens: 150,\n          temperature: 0.7\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to get recommendations from OpenAI\");\n      }\n      const data = await response.json();\n      const recommendations = data.choices[0].text.trim().split(\"\\n\").map(song => ({\n        name: song.trim()\n      }));\n      setRecommendedSongs(recommendations);\n    } catch (error) {\n      console.error(\"Error fetching recommendations:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RecPage\",\n    children: [/*#__PURE__*/_jsxDEV(HomeNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recommended Songs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      topItems: recommendedSongs,\n      datatype: \"tracks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(RecPage, \"XtKWP6LniyfbfzPW3CmLYW7Fwpg=\");\n_c = RecPage;\nexport default RecPage;\nvar _c;\n$RefreshReg$(_c, \"RecPage\");","map":{"version":3,"names":["useEffect","useState","Table","HomeNavBar","jsxDEV","_jsxDEV","RecPage","_s","token","setToken","window","localStorage","getItem","topSongs","setTopSongs","recommendedSongs","setRecommendedSongs","fetchTopSongs","response","fetch","method","headers","ok","Error","data","json","items","fetchRecommendations","error","console","songs","songTitles","map","song","name","join","process","env","REACT_APP_OPENAI_API_KEY","body","JSON","stringify","model","prompt","max_tokens","temperature","recommendations","choices","text","trim","split","className","children","fileName","_jsxFileName","lineNumber","columnNumber","topItems","datatype","_c","$RefreshReg$"],"sources":["/Users/rishaankumar/Desktop/Code/TrackTheSpot_v1/track-the-spot/src/RecPage.js"],"sourcesContent":["// RecPage.js\nimport './RecPage.css';\nimport { useEffect, useState } from \"react\";\nimport Table from './Table.js';\nimport HomeNavBar from './HomeNavBar.js';\n\nfunction RecPage() {\n    const [token, setToken] = useState(window.localStorage.getItem(\"token\") || \"\");\n    const [topSongs, setTopSongs] = useState([]);\n    const [recommendedSongs, setRecommendedSongs] = useState([]);\n\n    useEffect(() => {\n        if (token) {\n            fetchTopSongs();\n        }\n    }, [token]);\n\n    const fetchTopSongs = async () => {\n        try {\n            const response = await fetch(\n                `https://api.spotify.com/v1/me/top/tracks?time_range=short_term&limit=30`,\n                {\n                    method: 'GET',\n                    headers: {\n                        'Authorization': `Bearer ${token}`\n                    }\n                }\n            );\n\n            if (!response.ok) {\n                throw new Error('Failed to fetch top songs');\n            }\n\n            const data = await response.json();\n            setTopSongs(data.items || []);\n            fetchRecommendations(data.items); // Pass top songs to generate recommendations\n        } catch (error) {\n            console.error(\"Error fetching top songs:\", error);\n        }\n    };\n\n    const fetchRecommendations = async (songs) => {\n        const songTitles = songs.map(song => song.name).join(\", \");\n\n        try {\n            const response = await fetch(\"https://api.openai.com/v1/completions\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`\n                },\n                body: JSON.stringify({\n                    model: \"text-davinci-003\",\n                    prompt: `Based on these songs: ${songTitles}, recommend 30 other similar songs.`,\n                    max_tokens: 150,\n                    temperature: 0.7\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(\"Failed to get recommendations from OpenAI\");\n            }\n\n            const data = await response.json();\n            const recommendations = data.choices[0].text.trim().split(\"\\n\").map(song => ({\n                name: song.trim()\n            }));\n            setRecommendedSongs(recommendations);\n        } catch (error) {\n            console.error(\"Error fetching recommendations:\", error);\n        }\n    };\n\n    return (\n        <div className='RecPage'>\n            <HomeNavBar />\n            <h2>Recommended Songs</h2>\n            <Table topItems={recommendedSongs} datatype=\"tracks\" />\n        </div>\n    );\n}\n\nexport default RecPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}